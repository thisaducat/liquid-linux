#!/bin/bash

R="$(printf '\033[1;31m')"

G="$(printf '\033[1;32m')"

Y="$(printf '\033[1;33m')"

B="$(printf '\033[1;34m')"

C="$(printf '\033[1;36m')"

W="$(printf '\033[1;37m')" 

CURR_DIR=$(realpath "$(dirname "$BASH_SOURCE")")

UBUNTU_DIR="$PREFIX/var/lib/proot-distro/installed-rootfs/liquid"

# Function to calculate center padding
center_padding() {
  local text_width=$1
  local width=$2

  local padding=$(( (width - text_width) / 2 ))
  echo $padding
}

# Function to center the multi-line text on the screen
center_multi_text() {
  local lines=("$@")
  local height=$(tput lines)
  local width=$(tput cols)

  local total_lines=${#lines[@]}
  local text_height=$total_lines

  local top_padding=$(( (height - text_height) / 2 ))
  local max_width=0

  # Find the maximum line width
  for line in "${lines[@]}"; do
    line_width=${#line}
    if ((line_width > max_width)); then
      max_width=$line_width
    fi
  done

  # Calculate left padding for each line and print centered text
  for ((i = 0; i < total_lines; i++)); do
    line=${lines[$i]}
    line_width=${#line}
    left_padding=$(center_padding $line_width $width)
    tput cup $((top_padding + i)) $left_padding
    echo "$line"
  done

  # Reset the cursor position to continue printing subsequent text normally
  tput cup $((top_padding + text_height)) 0
}

# Example usage
clear
center_multi_text \
  "${Y}------------------------" \
  "${W}                        " \
  "${C}|     Liquid-Linux     |" \
  "${W}                        " \
  "${G}------------------------" \
  "${W}                        " \
  "${W}                        " \
  "${W}  kurulum başlatılıyor  " \
  "${W}                        " \
  "${W}                        " 

  sleep 7
  clear



banner() {
clear
center_multi_text \
  "${Y}------------------------" \
  "${W}                        " \
  "${C}|     Liquid-Linux     |" \
  "${W}                        " \
  "${G}------------------------" \
  "${W}                        "
}



banner1() {



		cat <<- EOF

		${Y}    ------------------------

		${C}    |     Liquid-Linux     |

		${G}    ------------------------

	EOF

	echo -e "${G}     Termux İçin Sanal Linux Ortamı"${W}
	echo -e "     Tarafından yapıldı: ${G}A${R}d${Y}u${C}c${B}a${G}t\n\n"${W}

}

package() {

	banner

	echo -e "${R} [${W}-${R}]${B} Gerekli paketler kontrol ediliyor.."${W}

	

	[ ! -d '/data/data/com.termux/files/home/storage' ] && echo -e "${R} [${W}-${R}]${C} Termux için gerekli ayarlar yapılıyor.."${W} && termux-setup-storage

	if [[ $(command -v pulseaudio) && $(command -v proot-distro) ]]; then

		echo -e "\n${R} [${W}-${R}]${G} Bu paket zaten kurulu."${W}

	else

		yes | pkg upgrade

		packs=(pulseaudio proot-distro proot)

		for x in "${packs[@]}"; do

			type -p "$x" &>/dev/null || {

				echo -e "\n${R} [${W}-${R}]${G} Şu paket kuruluyor : ${Y}$x${C}"${W}

				yes | pkg install "$x"
				
				

			}

		done

	fi

}

distro() {

	echo -e "\n${R} [${W}-${R}]${C} Sanal ortam için gerekli kontroller yapılıyor.."${W}

	termux-reload-settings

	

	if [[ -d "$UBUNTU_DIR" ]]; then

		echo -e "\n${R} [${W}-${R}]${G} Sanal ortam zaten yüklü (Liquid) lütfen sanal ortamı kaldırıp tekrar deneyin."${W}

		exit 0

	else

		proot-distro install liquid

		termux-reload-settings

	fi

	

	if [[ -d "$UBUNTU_DIR" ]]; then

		echo -e "\n${R} [${W}-${R}]${G} Sanal ortam indirildi."${W}

	else

		echo -e "\n${R} [${W}-${R}]${G} Sanal ortam indirilirken bir sorun oluştu.\n"${W}

		exit 0

	fi

}

sound() {

	echo -e "\n${R} [${W}-${R}]${C} Sanal ortama ses desteği ekleniyor.."${W}

	[ ! -e "$HOME/.sound" ] && touch "$HOME/.sound"

	echo "pulseaudio --start --exit-idle-time=-1" >> "$HOME/.sound"

	echo "pacmd load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1" >> "$HOME/.sound"

}

downloader(){

	path="$1"

	[ -e "$path" ] && rm -rf "$path"

	echo "İndiriliyor $(basename $1)..."

	curl --progress-bar --insecure --fail \

		 --retry-connrefused --retry 3 --retry-delay 2 \

		  --location --output ${path} "$2"

	echo

}

setup_vnc() {

	if [[ -d "$CURR_DIR/distro" ]] && [[ -e "$CURR_DIR/distro/libaslat" ]]; then

		cp -f "$CURR_DIR/distro/libaslat" "$UBUNTU_DIR/usr/local/bin/libaslat"

	else

		downloader "$CURR_DIR/liquid" "https://raw.githubusercontent.com/thisaducat/linux-liquid/master/distro/libaslat"

		mv -f "$CURR_DIR/libaslat" "$UBUNTU_DIR/usr/local/bin/libaslat"

	fi

	if [[ -d "$CURR_DIR/distro" ]] && [[ -e "$CURR_DIR/distro/likapat" ]]; then

		cp -f "$CURR_DIR/distro/likapat" "$UBUNTU_DIR/usr/local/bin/likapat"

	else

		downloader "$CURR_DIR/likapat" "https://raw.githubusercontent.com/thisaducat/liux-liquid/master/distro/likapat"

		mv -f "$CURR_DIR/likapat" "$UBUNTU_DIR/usr/local/bin/likapat"

	fi

	chmod +x "$UBUNTU_DIR/usr/local/bin/libaslat"

	chmod +x "$UBUNTU_DIR/usr/local/bin/likapat"

}

permission() {

	banner

	echo -e "${R} [${W}-${R}]${C} Sanal ortam ayarlanıyor.."${W}

	if [[ -d "$CURR_DIR/distro" ]] && [[ -e "$CURR_DIR/distro/set-liquid.sh" ]]; then

		cp -f "$CURR_DIR/distro/set-liquid.sh" "$UBUNTU_DIR/bin/set-liquid"

	else

		downloader "$CURR_DIR/set-liquid.sh" "https://raw.githubusercontent.com/thisaducat/linux-liquid/master/distro/set-liquid.sh"

		mv -f "$CURR_DIR/set-liquid.sh" "$UBUNTU_DIR/bin/set-liquid"

	fi

	chmod +x $UBUNTU_DIR/bin/set-liquid

	setup_vnc

	echo "$(getprop persist.sys.timezone)" > $UBUNTU_DIR/etc/timezone

	echo "proot-distro login liquid" > $PREFIX/bin/liquid

	chmod +x "$PREFIX/bin/liquid"

        cp $CURR_DIR/distro/update.sh $UBUNTU_DIR/bin/update

        chmod +x $UBUNTU_DIR/bin/update

        mkdir $UBUNTU_DIR/liquid

        cp $CURR_DIR/distro/liquid.ver $UBUNTU_DIR/liquid/liquid.ver

        chmod +x $UBUNTU_DIR/liquid/liquid.ver

        mkdir $UBUNTU_DIR/liquid_tmp

        cp $CURR_DIR/distro/gui.sh $UBUNTU_DIR/bin/set-gui

        chmod +x $UBUNTU_DIR/bin/set-gui

        pkg install x11-repo

        pkg install xwayland xorg-server-xvfb

        dpkg -i $CURR_DIR/distro/termux-x11.deb

        cp $CURR_DIR/distro/termux.properties $HOME/.termux/termux.properties

        echo 'export DISPLAY=:0' >> $HOME/.bashrc

	termux-reload-settings

	if [[ -e "$PREFIX/bin/liquid" ]]; then

		banner

		cat <<- EOF

			${R} [${W}-${R}]${G} Liqid Sanal Ortamı başarılı bir şekilde kuruldu

			${R} [${W}-${R}]${G} Bazı hataları engellemek için Termux'u yeniden başlatın.

			${R} [${W}-${R}]${G} Sanal ortamı başlatmak için ${C}liquid${G} yazın.

			${R} [${W}-${R}]${G} Liquid cihazınızla uyumlu olması için varsayılan olarak ayarlanmaz ,

			${R} [${W}-${R}]${G} Ayarlamak için ${C}liquid${G} yazın & sonra ${C}set-liquid${W} yazın.

		EOF

		{ echo; sleep 2; exit 1; }

	else

		echo -e "\n${R} [${W}-${R}]${G} Sanal ortam kurulurken bir hata oluştu.."${W}

		exit 0

	fi

}

patch() {
        echo -e "${Y}[YAMA] ${W}Liquid ekleniyor..."
	sleep 1
	chmod +x sources/proot-liquid
	cd sources
	bash proot-liquid
	cd ..
	echo -e "YAMA BAŞARILI!!!"
	
}

package

patch

distro

sound

permission
